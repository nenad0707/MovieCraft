@inject IJSRuntime JS
@inject PopularMoviesState PopularMoviesState

<CascadingAuthenticationState>
    @if (isAppLoaded)
    {
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        <RedirectToLogin />
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">We're sorry, this address does not exist.</p>
                </LayoutView>
            </NotFound>
        </Router>
    }
</CascadingAuthenticationState>

@code {
    private bool isAppLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var task1 = PopularMoviesState.LoadPopularMoviesAsync();

            var task2 = Task.Delay(3000);

            await Task.WhenAll(task1, task2);

            await JS.InvokeVoidAsync("removeSplashScreen");

            isAppLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movies: {ex.Message}");
        }
    }
}
