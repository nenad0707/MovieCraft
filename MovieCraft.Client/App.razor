@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PopularMoviesState PopularMoviesState
<CascadingAuthenticationState>
    @if (isSplashVisible)
    {
       @*  <LayoutView Layout="@typeof(SplashScreenLayout)">
            <SplashScreen />
        </LayoutView> *@

        <SplashScreen />
    }
    else
    {
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                @if (routeData.PageType == typeof(PopularMovies))
                {
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                }
                else
                {
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <NotAuthorized>
                            <RedirectToLogin />
                        </NotAuthorized>
                    </AuthorizeRouteView>
                }
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    }
</CascadingAuthenticationState>

@code {
    private bool isSplashVisible = true;

    [Inject]
    private NavigationManager? NavigationManager { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await PopularMoviesState.LoadPopularMoviesAsync();

            await Task.Delay(2000);

            isSplashVisible = false;

            NavigationManager!.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            isSplashVisible = false;
        }
    }
}
