@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PopularMoviesState PopularMoviesState
<CascadingAuthenticationState>
    @if (isSplashVisible)
    {
        <LayoutView Layout="@typeof(SplashScreenLayout)">
            <SplashScreen />
        </LayoutView>
    }
    else
    {
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                @if (routeData.PageType == typeof(PopularMovies))
                {
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                }
                else
                {
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <NotAuthorized>
                            @if (context.User.Identity?.IsAuthenticated != true)
                            {
                                <RedirectToLogin />
                            }
                            else
                            {
                                <p role="alert">You are not authorized to access this resource.</p>
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>
                }
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    }
</CascadingAuthenticationState>


@code {
    private bool isSplashVisible = true;
    private bool isUserLoggedIn;

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isUserLoggedIn = authState.User.Identity!.IsAuthenticated;

           
            await PopularMoviesState.LoadPopularMoviesAsync(isUserLoggedIn);

            await Task.Delay(5000);

            isSplashVisible = false;

            NavigationManager!.NavigateTo("/popular-movies");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading popular movies: {ex.Message}");
            isSplashVisible = false;
        }
    }
}
