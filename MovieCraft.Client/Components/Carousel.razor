@inject PopularMoviesState PopularMoviesState
@inject BackgroundState BackgroundState
@implements IDisposable
@inject IJSRuntime JS

@if (PopularMoviesState.PopularMovies == null)

{
    <p>Loading movies...</p>
}

else if (!PopularMoviesState.PopularMovies.Any())

{
    <p>No popular movies found.</p>
}

else

{
    <div class="carousel-container">
        <div class="carousel-box">
            <div class="carousel">
                @foreach (var movie in PopularMoviesState.PopularMovies)

                {
                    <div class="carousel-item" @onclick="() => SetBackground(movie.BackdropPath)">
                        <img src="@($"https://image.tmdb.org/t/p/w342{movie.PosterPath}")"
                             alt="@movie.Title" loading="lazy" />
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    protected override void OnInitialized()

    {

        PopularMoviesState.OnChange += StateHasChanged;

    }



    protected override async Task OnAfterRenderAsync(bool firstRender)

    {

        if (firstRender)

        {

            await JS.InvokeVoidAsync("initCarousel");

        }

    }



    public void Dispose()

    {

        PopularMoviesState.OnChange -= StateHasChanged;

    }



    public void SetBackground(string backdropPath)

    {

        BackgroundState.BackgroundImageUrl = $"https://image.tmdb.org/t/p/w1280{backdropPath}";

    }
}
