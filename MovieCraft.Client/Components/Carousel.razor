@typeparam TItem

@if (Items == null || !Items.Any())
{
    <p>Loading...</p>
}
else
{
    <div class="carousel-box">
        <div class="swiper-container">
            <div class="swiper-wrapper">
                @foreach (var item in Items)
                {
                    <div class="swiper-slide" @onclick="() => HandleItemSelected(item)">
                        <div class="carousel-slide">
                            @ItemTemplate(item)
                            <div class="carousel-overlay"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }

    [Parameter]
    public EventCallback<TItem> OnItemSelected { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = default!;

    private bool swiperInitialized = false;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Items != null && Items.Any() && !swiperInitialized)
        {
            await JS.InvokeVoidAsync("initSwiper");
            swiperInitialized = true;
        }
    }

    private async Task HandleItemSelected(TItem item)
    {
        await OnItemSelected.InvokeAsync(item);
    }
}