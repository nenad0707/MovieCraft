@using MovieCraft.Shared.DTOs
@inherits LayoutComponentBase
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <LoginDisplay />
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool isUserSynced = false; // Postavljena zastavica koja osigurava da se sinhronizacija izvrši samo jednom

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Samo ako je korisnik prijavljen i nije već sinhronizovan, obavi proveru
        if (user.Identity!.IsAuthenticated && !isUserSynced)
        {
            var userId = user.FindFirst(c => c.Type == "sub")?.Value;

            if (!await UserExistsInDatabase(userId))
            {
                await SyncUserToDatabase(userId, user.Identity.Name);
            }

            isUserSynced = true;  // Obeležavamo da je korisnik sinhronizovan
        }
    }

    private async Task<bool> UserExistsInDatabase(string userId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("MovieCraft.ServerAPI");
            var response = await httpClient.GetAsync($"api/users/{userId}");

            return response.IsSuccessStatusCode;  // Ako korisnik postoji u bazi, nema potrebe za sinhronizacijom
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking if user exists in the database: {ex.Message}");
            return false;
        }
    }

    private async Task SyncUserToDatabase(string userId, string userName)
    {
        try
        {
            var syncUser = new UserDto
                {
                    UserId = userId!,
                    Name = userName!
                };

            var httpClient = HttpClientFactory.CreateClient("MovieCraft.ServerAPI");
            var response = await httpClient.PostAsJsonAsync("api/users/sync", syncUser);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User successfully synchronized.");
            }
            else
            {
                Console.WriteLine("Failed to synchronize user.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error syncing user to the database: {ex.Message}");
        }
    }
}
