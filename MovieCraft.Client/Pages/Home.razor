@page "/"
@inject PopularMoviesState PopularMoviesState
@inject BackgroundState BackgroundState
@inject UserState UserState

<PageTitle>Home</PageTitle>

<div class="container-fluid">
    <div class="row align-items-start">
        <div class="col-lg-4 col-md-12 order-lg-1 order-2 d-flex flex-column justify-content-end movie-details-container">
            @if (selectedMovie != null)
            {
                <MovieDetails Movie="selectedMovie" />
                <div class="action-buttons-container">
                    <ActionButtons TmdbId="selectedMovie.TmdbId" OnTrailerRequested="ShowTrailer" />
                </div>
            }
        </div>

        <div class="col-lg-8 col-md-12 order-lg-2 order-1 carousel-container">
            <Carousel TItem="MovieDto" Items="PopularMoviesState.PopularMovies" OnItemSelected="OnMovieSelected">
                <ItemTemplate Context="movie">
                    <img src="@ImageHelper.GetPosterUrl(movie.PosterPath)" alt="@movie.Title" loading="lazy" />
                </ItemTemplate>
            </Carousel>
        </div>
    </div>
</div>

<TrailerModal OnClose="HandleTrailerClose" TrailerUrl="@currentTrailerUrl" />

@code {
    private MovieDto? selectedMovie;
    private string? currentTrailerUrl;

    async Task OnMovieSelected(MovieDto movie)
    {
        selectedMovie = movie;
        await BackgroundState.SetBackgroundAsync(movie.BackdropPath);
    }

    protected override async Task OnInitializedAsync()
    {
        PopularMoviesState.OnChange += StateHasChanged;
       
        await PopularMoviesState.LoadPopularMoviesAsync();

        await UserState.LoadUserAsync();
    }

    public void ShowTrailer(int tmdbId)
    {
        if (selectedMovie != null && selectedMovie.TmdbId == tmdbId)
        {
            currentTrailerUrl = selectedMovie.TrailerUrl;
            StateHasChanged(); 
        }
    }

    private void HandleTrailerClose()
    {
        currentTrailerUrl = null;
    }
}
