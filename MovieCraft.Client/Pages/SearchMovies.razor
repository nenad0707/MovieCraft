@page "/search"
@inject MovieService MovieService
@inject UserState UserState
@inject FavoriteMoviesState FavoriteMoviesState
@inject NavigationManager Navigation

<PageTitle>Search Movies</PageTitle>

<div class="search-page">
    <SearchInput @bind-Value="searchQuery"
                 ShowSearchButton="true"
                 DisableSearchButtonWhenEmpty="true"
                 OnSearch="Search"
                 Placeholder="Search for movies..." />
    @if (message != null)
    {
        <div class="alert alert-info">@message</div>
    }

    <div class="movie-grid">
        @if (movies != null && movies.Any())
        {
            @foreach (var movie in movies)
            {
                <div class="mb-3 d-flex justify-content-center">
                    <MovieCard Movie="movie"
                               FlippedMovieId="@flippedMovieId"
                               OnAddToFavorites="AddToFavorites" />
                </div>
            }
        }
        else if (hasSearched)
        {
            <div class="col-12">
                <p class="text-center">No movies found for "@searchQuery".</p>
            </div>
        }
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private List<MovieDto> movies = new();
    private int? flippedMovieId = null;
    private string? message;
    private bool hasSearched = false;

    private async Task Search()
    {
        hasSearched = true;

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            message = "Please enter a search term.";
            movies.Clear();
            return;
        }

        try
        {
            movies = await MovieService.SearchMoviesAsync(searchQuery);
            message = null; // Clear message if search is successful
        }
        catch (Exception ex)
        {
            message = $"Error during search: {ex.Message}";
        }
    }

    private void FlipCard(int movieId)
    {
        flippedMovieId = flippedMovieId == movieId ? (int?)null : movieId;
    }

    private async Task AddToFavorites(int tmdbId)
    {
        if (UserState.CurrentUser == null)
        {
            Navigation.NavigateTo("authentication/login");
            return;
        }
        try
        {
            message = await MovieService.AddToFavoritesAsync(tmdbId);
            StateHasChanged();

            movies = movies.Where(m => m.TmdbId != tmdbId).ToList();
            StateHasChanged();

            await Task.Delay(3000);
            message = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }
}
